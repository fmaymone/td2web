# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe TenantsController, type: :controller do
  render_views
  include_context 'users'

  describe 'Logged in as an admin' do
    before(:each) { sign_in admin }

    # Tenant. As you add validations to Tenant, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) do
      attributes_for(:tenant)
    end

    let(:invalid_attributes) do
      { slug: nil, name: 'foo', domain: nil }
    end

    describe 'GET /index' do
      it 'renders a successful response' do
        Tenant.create! valid_attributes
        get :index
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        tenant = Tenant.create! valid_attributes
        get :show, params: { id: tenant.id }
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get :new
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'render a successful response' do
        tenant = Tenant.create! valid_attributes
        get :edit, params: { id: tenant.id }
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new Tenant' do
          expect do
            post :create, params: { tenant: valid_attributes }
          end.to change(Tenant, :count).by(1)
        end

        it 'redirects to the created tenant' do
          post :create, params: { tenant: valid_attributes }
          expect(response).to redirect_to(tenant_path(assigns[:tenant]))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new Tenant' do
          expect do
            post :create, params: { tenant: invalid_attributes }
          end.to change(Tenant, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post :create, params: { tenant: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          attributes_for(:tenant, name: 'NewName')
        end

        it 'updates the requested tenant' do
          tenant = Tenant.create! valid_attributes
          put :update, params: { id: tenant.id, tenant: new_attributes }
          tenant.reload
          expect(assigns[:tenant].name).to eq('NewName')
        end

        it 'redirects to the tenant' do
          tenant = Tenant.create! valid_attributes
          put :update, params: { id: tenant.id, tenant: new_attributes }
          tenant.reload
          expect(response).to redirect_to(tenant_path(tenant))
        end
      end

      context 'with invalid parameters' do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          tenant = Tenant.create! valid_attributes
          tenant.reload
          put :update, params: { id: tenant.id, tenant: invalid_attributes }
          expect(response).to be_successful
          expect(response).to render_template(:edit)
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested tenant' do
        tenant = Tenant.create! valid_attributes
        expect do
          delete :destroy, params: { id: tenant.id }
        end.to change(Tenant, :count).by(-1)
      end

      it 'redirects to the tenants list' do
        tenant = Tenant.create! valid_attributes
        delete :destroy, params: { id: tenant.id }
        expect(response).to redirect_to(tenants_path)
      end
    end
  end
end
