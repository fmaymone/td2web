# frozen_string_literal: true

module EntitlementServices
  # Entitlement Grant Service
  class Grant
    attr_reader :grantor, :user, :entitlement, :quota, :errors, :grant

    def initialize(user:, entitlement:, grantor: nil, quota: nil)
      @user = user
      @entitlement = entitlement
      @grantor = grantor || default_grantor
      @quota = quota || entitlement.quota
      @errors = []
      @grant = nil
    end

    def call
      grant = new_grant
      if valid? && grant.save
        @grant = grant
      else
        @errors += grant.errors.full_messages
        @grant = nil
      end
    end

    def valid?
      validate
      @errors.empty?
    end

    private

    def validate
      validate_roles
    end

    def validate_roles
      @errors << "Grantor does not have permission to grant an entitlement for #{@entitlement.role.name} accounts" if @entitlement.role > @grantor.role
      @errors << "User does not have sufficient privilege to receive this entitlement for #{@entitlement.role.name} accounts" if @entitlement.role > @user.role
    end

    def new_grant
      ::Grant.new(
        active: true,
        user: @user,
        reference: @entitlement.reference,
        entitlement: @entitlement,
        grantor: @grantor,
        quota: @quota,
        description: 'Grant generated by Entitlement Services',
        staff_notes: default_staff_notes,
        granted_at: DateTime.now
      )
    end

    def default_staff_notes
      notes = []
      notes << 'Default Grantor.' if @grantor.id == default_grantor.id
      notes << 'Nonstandard quota.' if @quota != entitlement.quota
      notes.join(' ')
    end

    def default_grantor
      @user.tenant.users.admins.first
    end
  end
end
